parameters:
  displayName: Staging
  environment: stage
  TerraformVersion: 0.12.18
  TerraformVariables: ''
  TerraformBackendServiceConnection: TealML Azure DevOps Terraform pipeline
  TerraformEnvironmentServiceConnection: TealML Azure DevOps Terraform pipeline
  TerraformBackendResourceGroup: terraform
  TerraformBackendStorageAccount: tealterraform
  TerraformBackendStorageContainer: terraformstate
  TerraformBackendLocation: North Europe

stages:
- stage: 'Terraform_Plan_${{ parameters.environment }}'
  displayName: 'Plan ${{ parameters.displayName }}'
  jobs:
  - job: "Terraform_Plan"
    displayName: "Terraform Plan"
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: AzureCLI@1
      inputs:
        azureSubscription: ${{ parameters.TerraformBackendServiceConnection }}
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error
          export AZURE_STORAGE_ACCOUNT='${{ parameters.TerraformBackendStorageAccount }}'
          container='${{ parameters.TerraformBackendStorageContainer }}'
          if ! az storage container exists -n "$container" -o none; then
            time az configure --defaults group='${{ parameters.TerraformBackendResourceGroup }}' location='${{ parameters.TerraformBackendLocation }}'
            time az group create -n '${{ parameters.TerraformBackendResourceGroup }}' -o none
            time az storage account create -n "$AZURE_STORAGE_ACCOUNT" -o none
            time az storage container create -n "$container" -o none
          fi
          blob='${{ parameters.environment }}.tfstate'
          if [[ $(az storage blob exists -c "$container" -n "$blob" --query exists) = "true" ]]; then
            if [[ $(az storage blob show -c "$container" -n "$blob" --query "properties.lease.status=='locked'") = "true" ]]; then
              echo "State is leased"
              lock_jwt=$(az storage blob show -c "$container" -n "$blob" --query metadata.terraformlockid -o tsv)
              if [ "$lock_jwt" != "" ]; then
                lock_json=$(base64 -d <<< "$lock_jwt")
                echo "State is locked"
                jq . <<< "$lock_json"
              fi
              if [ "${TERRAFORM_BREAK_LEASE:-}" != "" ]; then
                az storage blob lease break -c "$container" -b "$blob"
              else
                echo "If you're really sure you want to break the lease, rerun the pipeline with variable TERRAFORM_BREAK_LEASE set to 1."
                exit 1
              fi
            fi
          fi
        addSpnToEnvironment: true
      displayName: 'Set up backend'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: ${{ parameters.TerraformVersion }}

    - bash: |
        cp infrastructure/terraform_backend/* infrastructure/terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Copy terraform backend config to terraform directory'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform init'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
        backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
        backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
        backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
        backendAzureRmKey: ${{ parameters.environment }}.tfstate

    # Using AzureCLI instead of Terraform extension because of https://github.com/microsoft/azure-pipelines-extensions/issues/747
    - task: AzureCLI@1
      inputs:
        azureSubscription: '${{ parameters.TerraformEnvironmentServiceConnection }}'
        scriptLocation: inlineScript
        inlineScript: |
          set -eu
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_CLIENT_SECRET="$servicePrincipalKey"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_TENANT_ID="$tenantId"
          terraform plan -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformVariables }}
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
        addSpnToEnvironment: true
      displayName: 'Terraform plan'

    - bash: |
        # Save a human-friendly version of the plan with passwords hidden
        terraform show -no-color tfplan > plan.txt
        # Remove terraform plan from published artifacts, as it contains clear-text secrets
        rm tfplan
        # Resource providers can be > 100MB large, we don't want them in the published artifacts.
        rm -r .terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      displayName: 'Save plan text representation'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        artifact: terraform_resources_${{ parameters.environment }}

- stage: 'Terraform_Apply_${{ parameters.environment }}'
  displayName: 'Apply ${{ parameters.displayName }}'
  jobs:
  - deployment: ${{ parameters.environment }}
    environment: ${{ parameters.displayName }}
    displayName: "Terraform Apply"
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: ${{ parameters.TerraformVersion }}

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              artifactName: terraform_resources_${{ parameters.environment }}
              targetPath: '$(System.DefaultWorkingDirectory)/terraform_resources'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
              backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
              backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
              backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
              backendAzureRmKey: ${{ parameters.environment }}.tfstate

          # As the Terraform extension plan task doesn't support -detailed-exitcode
          # (to check if any changes are present), we define an equivalent AzureCLI
          # task instead.
          - task: AzureCLI@1
            inputs:
              azureSubscription: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              scriptLocation: inlineScript
              inlineScript: |
                set -eu
                export ARM_CLIENT_ID="$servicePrincipalId"
                export ARM_CLIENT_SECRET="$servicePrincipalKey"
                export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                export ARM_TENANT_ID="$tenantId"
                # terraform plan -detailed-exitcode exit codes:
                # 0 - Succeeded, diff is empty (no changes)
                # 1 - Errored
                # 2 - Succeeded, there is a diff
                # >2 - unexpected, crash or bug
                if terraform plan -detailed-exitcode -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformVariables }}; then
                  echo "Terraform succeeded with no changes"
                else
                  terraform_exitcode=$?
                  if [ $terraform_exitcode -eq 2 ]; then
                    echo "Terraform succeeded with updates"
                    echo "##vso[task.setvariable variable=TERRAFORM_UPDATES;]true"
                  else
                    echo "ERROR: terraform exited with code $terraform_exitcode"
                    exit 1
                  fi
                fi
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              addSpnToEnvironment: true
            displayName: 'Terraform plan'

          - bash: |
              set -eux  # ensure pipeline stops if terraform fails or diff reports a difference
              terraform show -no-color tfplan > newplan.txt
              diff -u plan.txt newplan.txt
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
            displayName: 'Ensure plan is unchanged'

          - task: AzureCLI@1
            displayName: 'Terraform apply'
            condition: and(succeeded(), variables['TERRAFORM_UPDATES'])
            inputs:
              azureSubscription: '${{ parameters.TerraformEnvironmentServiceConnection }}'
              scriptLocation: inlineScript
              inlineScript: |
                set -eu
                export ARM_CLIENT_ID="$servicePrincipalId"
                export ARM_CLIENT_SECRET="$servicePrincipalKey"
                export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                export ARM_TENANT_ID="$tenantId"
                terraform apply -auto-approve tfplan
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_resources'
              addSpnToEnvironment: true
