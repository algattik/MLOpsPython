jobs:
- job: Environment
  displayName: "Set up build environment"
  steps:
  - task: AzureCLI@1
    displayName: Generate build container
    name: SetContainer
    inputs:
      azureSubscription: AzureResourceConnection
      scriptLocation: inlineScript
      inlineScript: |
        set -euxo pipefail  # fail on error
        acrId=$(az resource show -g "$RESOURCE_GROUP" -n "$WORKSPACE_NAME" --resource-type Microsoft.MachineLearningServices/workspaces --query properties.containerRegistry -o tsv)
        read -r acrName acrServer <<< $(az resource show --id "$acrId" --query '[[name,properties.loginServer]]' -o tsv)
        dockerDir=environment_setup/files
        imageTag=$(find "$dockerDir" -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -f1 -d ' ')
        imageName="$acrServer/modelbuild/$(BUILDCONTAINER_NAME)"
        if ! az acr repository show -n $acrName --image "modelbuild/$(BUILDCONTAINER_NAME):$imageTag" -o table; then
          az acr build \
            -r "$acrName" \
            -t "$imageName:$imageTag" \
            -t "$imageName:latest" \
            "$dockerDir"
        fi
        echo "##vso[task.setvariable variable=BUILD_IMAGE;isOutput=true]$imageName:$imageTag"

- job: "Model_CI_Pipeline"
  displayName: "Model CI Pipeline"
  dependsOn: Environment
  variables:
    BUILD_IMAGE: $[ dependencies.Environment.outputs['SetContainer.BUILD_IMAGE'] ]
  container:
    image: $(BUILD_IMAGE)
    endpoint: ContainerRegistry
  timeoutInMinutes: 0
  steps:

  - script: |
     apt update
     apt install -y icu-devtools
     tox
    displayName: 'Run tests'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '*-testresults.xml'
      testRunTitle: 'Linting & Unit tests'
      failTaskOnFailedTests: true
    displayName: 'Publish linting and unit test results'

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk to generate HTML coverage report'
    inputs:
      packageType: sdk
      version: 3.1.101
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'coverage.xml'
      failIfCoverageEmpty: true
