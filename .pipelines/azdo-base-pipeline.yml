jobs:
- job: Environment
  displayName: "Set up build environment"
  steps:
  - task: AzureCLI@1
    displayName: Generate build container
    name: SetContainer
    inputs:
      azureSubscription: AzureResourceConnection
      scriptLocation: inlineScript
      inlineScript: |
        set -euxo pipefail  # fail on error
        dockerDir=environment_setup/files
        imageTag=$(find "$dockerDir" -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -f1 -d ' ')
        imageName="$(ACR).azurecr.io/modelbuild/$(BUILDCONTAINER_NAME)"
        if ! az acr repository show -n $(ACR) --image "modelbuild/$(BUILDCONTAINER_NAME):$imageTag" -o table; then
          az acr build \
            -r $(ACR) \
            -t "$imageName:$imageTag" \
            -t "$imageName:latest" \
            "$dockerDir"
        fi
        echo "##vso[task.setvariable variable=BUILD_IMAGE;isOutput=true]$imageName:$imageTag"
      workingDirectory: azureml

- job: "Model_CI_Pipeline"
  displayName: "Model CI Pipeline"
  dependsOn: Environment
  variables:
    BUILD_IMAGE: $[ dependencies.Environment.outputs['SetContainer.BUILD_IMAGE'] ]
  container:
    image: $(BUILD_IMAGE)
    endpoint: aml-acr-connection
  timeoutInMinutes: 0
  steps:

  - script: |
     flake8 --output-file=$(Build.BinariesDirectory)/lint-testresults.xml --format junit-xml
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Run code quality tests'

  - script: |
     pytest test/unit --cov=code --cov-report=html --junitxml=$(Build.BinariesDirectory)/unit-testresults.xml  --nunitxml="*-testresults.xml"
    workingDirectory: azureml
    displayName: 'Run unit tests'
